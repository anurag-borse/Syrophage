  @model List<Syrophage.Models.Blog>
  @using System.Text.RegularExpressions






<style>
    .bg-half {
        background-image: url('../assets/images/home/bg-blog.jpg');
    }
</style>




<div id="preloader">
    <div id="status">
        <div class="spinner">
            <div class="double-bounce1"></div>
            <div class="double-bounce2"></div>
        </div>
    </div>
</div>

<section class="bg-half">
    <div class="bg-overlay"></div>
    <div class="home-center">
        <div class="home-desc-center">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-lg-12">
                        <div class="page-next-level text-white">
                            <h1 class="text-uppercase">Blogs</h1>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<section class="section">
    <div class="container">
        <div class="row">
            @foreach (var blog in Model)
            {
                <div class="col-md-4">
                    <article class="post blog-post">
                        <div class="post-preview">
                            <a href="#"><img src="@blog.ImageUrl" alt="" class="mx-auto d-block" height="300px" width="500px"></a>
                        </div>

                        <div class="post-header">
                            <h4 class="post-title"><a href="#">@blog.Title</a></h4>
                            <ul class="post-meta">
                                <li><i class="mdi mdi-calendar"></i> <small>@blog.date</small></li>
                                <li>
                                    <i class="mdi mdi-tag-text-outline"></i>
                                    <a href="#"> <small>@blog.Type</small></a>
                                </li>
                            </ul>
                            <div class="post-content col-sm-8 col-md-10 col-lg-12">
                                @{
                                    // Split the blog description into words while preserving line breaks
                                    var words = Regex.Split(blog.BlogDesc, @"\s+");
                                    // Take only the first 15-20 words of the description
                                    var truncatedDesc = string.Join(" ", words.Take(15)); // Change 15 to 20 if you want 20 words
                                }
                                <p class="text-muted">@Html.Raw(truncatedDesc)...</p>
                            </div>





                            <span class="bar"></span>

                            <div class="post-footer">
                                <div class="likes">
                                    <ul class="post-meta">
                                        <li><a href="#"><i class="far fa-heart mr-1"></i> <small>@blog.Like</small></a></li>
                                        <li>
                                            <a href="#">
                                                <i class="far fa-comment mr-1"></i>
                                                <small>@blog.Comments</small>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="post-more"><a asp-action="viewBlog" asp-controller="Home" asp-route-id="@blog.id">Read More <i class="mdi mdi-arrow-right"></i></a></div>
                            </div>
                        </div>
                    </article>
                </div>
            }
        </div>
    </div>
</section>





<section class="section">
    <div class="container">
        <h1>Add your Blog</h1>
        <span class="bar"></span>

        <div class="mt-4">
            <div class="custom-form">
                <form asp-action="AddBlog" asp-controller="Home" enctype="multipart/form-data">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group app-label">
                                <input id="name1" type="text" class="form-control" placeholder="Your name :" name="Name">
                            </div>
                        </div>


                        <div class="col-lg-6">
                            <div class="form-group app-label">
                                <input id="email1" type="email" class="form-control" placeholder="Your email :" name="email">
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <label for="city">Type:</label>
                            <select id="city" name="Type">
                                <option value="Finance">Finance</option>
                                <option value="Discussion">Discussion</option>
                                <option value="Marketing">Marketing</option>
                                <option value="Accounts">Accounts</option>
                                <option value="Achievements">Achievements</option>
                                <option value="Annual-report">Annual-report</option>
                            </select>

                        </div>



                        <div class="col-lg-6" style="margin-bottom:10px">
                            <input  class="form-control" type="file" id="formFile" name="file"  />
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group app-label">
                                <input id="email1" type="text" class="form-control" placeholder="Your Blog title :" name="Title">
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group app-label">
                                <textarea id="comments1" rows="3" class="form-control" placeholder="Enter message :" name="BlogDesc"></textarea>
                            </div>
                        </div>
                    </div>





                    <div class="row">
                        <div class="col-sm-12">
                            <input type="submit" id="submit1" name="send" class="submitBnt btn btn-custom" value="Submit">
                        </div>
                    </div>



                </form>
            </div>
        </div>
    </div>

</section>


<script src="https://cdn.tiny.cloud/1/xcxpej3c8vgx3kt5pgkj052gguxrol392wpvq739a37glrf0/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>

<script>

    tinymce.init({
        selector: 'textarea',
        plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed linkchecker a11ychecker tinymcespellchecker permanentpen powerpaste advtable advcode editimage advtemplate ai mentions tinycomments tableofcontents footnotes mergetags autocorrect typography inlinecss markdown',
        toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
        tinycomments_mode: 'embedded',
        tinycomments_author: 'Author name',
        mergetags_list: [
            { value: 'First.Name', title: 'First Name' },
            { value: 'Email', title: 'Email' },
        ],
        ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
    });



    // const api_key = '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';

    // const ai_request = (request, respondWith) => {
    //     const claudeOptions = {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json',
    //             'Authorization': `Bearer ${api_key}`
    //         },
    //         body: JSON.stringify({
    //             model: 'claude-2.1',
    //             temperature: 0.7,
    //             max_tokens: 800,
    //             messages: [{ role: 'user', content: request.prompt }],
    //         })
    //     };
    //     respondWith.string((signal) => window.fetch('https://api.claude.ai/v1/completions', { signal, ...claudeOptions })
    //         .then(async (response) => {
    //             if (response) {
    //                 const data = await response.json();
    //                 if (data.error) {
    //                     throw new Error(`${data.error.type}: ${data.error.message}`);
    //                 } else if (response.ok) {
    //                     // Extract the response content from the data returned by the API
    //                     return data?.choices[0]?.message?.content?.trim();
    //                 }
    //             } else {
    //                 throw new Error('Failed to communicate with the ChatGPT API');
    //             }
    //         })
    //     );
    // };

    // tinymce.init({
    //     selector: 'textarea',  Change this value according to your HTML
    //     plugins: 'ai',
    //     toolbar: 'aidialog aishortcuts',
    //     ai_request
    // });


    // const claude_api_key = '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';

    // const ai_request = (request, respondWith) => {
    //     const claudeOptions = {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json',
    //             'Authorization': `Bearer ${claude_api_key}` // Adjust if Claude AI requires a different authorization method
    //         },
    //         body: JSON.stringify({
    //             model: 'your_claude_model', // Adjust model if needed
    //             temperature: 0.7,
    //             max_tokens: 800,
    //             prompt: request.prompt // Adjust prompt format if needed
    //         })
    //     };
    //     respondWith.string((signal) => window.fetch('https://api.claude.ai/v1/completions', { signal, ...claudeOptions })
    //         .then(async (response) => {
    //             if (response) {
    //                 const data = await response.json();
    //                 if (data.error) {
    //                     throw new Error(`${data.error.type}: ${data.error.message}`);
    //                 } else if (response.ok) {
    //                     // Extract the response content from the data returned by the API
    //                     return data?.choices[0]?.message?.content?.trim();
    //                 }
    //             } else {
    //                 throw new Error('Failed to communicate with the Claude AI API');
    //             }
    //         })
    //     );
    // };

    // tinymce.init({
    //     selector: 'textarea',  // Change this value according to your HTML
    //     plugins: 'ai',
    //     toolbar: 'aidialog aishortcuts',
    //     ai_request
    // });



</script>



<partial name="_Toastr" />